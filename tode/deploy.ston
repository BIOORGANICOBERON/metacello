TDScriptLeafNode {	#name : 'deploy',	#contents : '[ :topez :objIn :tokens :windowId | \n| project version versions constructor packageNames methodSections gofer spec |\nTranscript\n  cr;\n  show: \'Deploying Metacello: \' , DateAndTime now asString.\nfalse\n  ifTrue: [ \n    \"get fresh copy of ConfigurationOfMetacello from github\"\n    spec := Metacello new\n      configuration: \'Metacello\';\n      repository: \'github://dalehenrich/metacello-work:1.0-beta.31/repository\';\n      get ]\n  ifFalse: [ \n    spec := Metacello image\n      configuration: \'Metacello\';\n      list ].\t\"\r---\rcollect versions\r---\"\nversions := Array new.\nproject := ConfigurationOfMetacello project.\nversion := project version: #\'stable\'.\nversions add: version.\t\"\r---\rcollect method sections for each version\r---\"\npackageNames := Set new.\nmethodSections := #().\nversions\n  do: [ :sourceVersion | \n    constructor := MetacelloToolBoxConstructor new.\n    constructor configuration: ConfigurationOfMetacello new.\n    constructor extractMethodSectionsFor: sourceVersion versionString.\n    methodSections := methodSections , constructor methodSections ].\t\"\r---\rcollect packageNames for each section\r---\"\nmethodSections\n  do: [ :methodSection | \n    | versionSpec |\n    versionSpec := methodSection versionSpec.\n    versionSpec packages\n      specListDo: [ :packageSpec | packageSpec getFile ifNotNil: [ :file | packageNames add: file ] ] ].\npackageNames := packageNames asArray sorted.\t\"\r---\rfetch\r---\"\ngofer := Gofer new.\nspec repositories\n  do: [ :repoSpec | gofer repository: repoSpec createRepository ].\npackageNames do: [ :packageName | gofer version: packageName ].\ngofer fetch.\t\"\r---\rpush packages\r---\"\ngofer := Gofer new.\npackageNames do: [ :packageName | gofer version: packageName ].\n#(\'http://www.squeaksource.com/metacello\' \'http://seaside.gemstone.com/ss/metacello\')\n  do: [ :description | \n    | repos |\n    repos := TDMonticelloTool new repositoryFromDescription: description.\n    (repos user isEmpty or: [ repos password isEmpty ])\n      ifTrue: [ repos error: \'need to set user/pass for: \' , description printString ].\n    gofer repository: repos ].\ngofer push.\t\"\r---\rfetch configuration\r---\"\ngofer := Gofer new.\n#(\'github://dalehenrich/metacello-work:1.0-beta.31/repository\')\n  do: [ :description | \n    | repos |\n    repos := TDMonticelloTool new repositoryFromDescription: description.\n    gofer repository: repos ].\n#(\'ConfigurationOfMetacello\') do: [ :packageName | gofer package: packageName ].\ngofer fetch.\t\"\r---\rpush configuration\r---\"\n    gofer := Gofer new.\n    #(\'ConfigurationOfMetacello\')\n      do: [ :packageName | gofer package: packageName ].\n    #(\'http://www.squeaksource.com/MetacelloRepository\' \'http://seaside.gemstone.com/ss/MetacelloRepository\' \'http://seaside.gemstone.com/ss/metacello\')\n      do: [ :description | \n        | repos |\n        repos := TDMonticelloTool new repositoryFromDescription: description.\n        (repos user isEmpty or: [ repos password isEmpty ])\n          ifTrue: [ repos error: \'need to set user/pass for: \' , description printString ].\n        gofer repository: repos ].\n    gofer push .\nTranscript\n  cr;\n  show: \'... finished deploying Metacello: \' , DateAndTime now asString ]'}